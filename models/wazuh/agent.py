#!/usr/bin/env python

# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is a free software; you can redistribute it and/or modify it under the terms of GPLv2

from wazuh.utils import execute, cut_array, sort_array, search_array
from wazuh import common


class Agent:
    """
    OSSEC Agent object.
    """

    def __init__(self, id=-1):
        """
        Initialize an agent.

        :param id: AgentID in case it is known.
        """

        self.id = id
        self.key = None

        self.status = None
        self.name = None
        self.ip = None
        self.lastKeepAlive = None
        self.version = None
        self.os = None
        self.rootcheckTime = None
        self.rootcheckEndTime = None
        self.syscheckTime = None
        self.syscheckEndTime = None

    def __str__(self):
        return str(self.to_dict())

    def to_dict(self):
        dictionary = {'status': self.status, 'name': self.name, 'ip': self.ip, 'id': self.id, 'lastKeepAlive': self.lastKeepAlive, 'version': self.version, 'os': self.os, 'rootcheckTime': self.rootcheckTime, 'rootcheckEndTime': self.rootcheckEndTime, 'syscheckTime': self.syscheckTime, 'syscheckEndTime': self.syscheckEndTime}
        return dictionary

    def get(self):
        """
        Gets attributes of existing agent.
        """

        data_agent = execute([common.agent_control, '-j', '-e', '-i', self.id])

        self.status = data_agent['status']
        self.name = data_agent['name']
        self.ip = data_agent['ip']
        self.id = data_agent['id']
        self.lastKeepAlive = data_agent['lastKeepAlive']
        self.version = data_agent['version']
        self.os = data_agent['os']
        self.rootcheckTime = data_agent['rootcheckTime']
        self.rootcheckEndTime = data_agent['rootcheckEndTime']
        self.syscheckTime = data_agent['syscheckTime']
        self.syscheckEndTime = data_agent['syscheckEndTime']

    def get_key(self):
        """
        Gets agent key.

        :return: Agent key.
        """

        self.key = execute([common.manage_agents, '-j', '-e', self.id])
        return self.key

    def restart(self):
        """
        Restarts the agent.

        :return: Message generated by OSSEC.
        """

        return execute([common.agent_control, '-j', '-R', '-u', self.id])

    def remove(self):
        """
        Deletes the agent.

        :return: Message generated by OSSEC.
        """
        return execute([common.manage_agents, '-j', '-r', self.id])

    def add(self, name, ip):
        """
        Adds the agent to OSSEC.

        :param name: name of the new agent.
        :param ip: IP of the new agent. It can be an IP, IP/NET or ANY.
        :return: Agent ID.
        """

        if ip.lower() == 'any':
            cmd = [common.manage_agents, '-j', '-a', 'any', '-n', name]
        else:
            cmd = [common.manage_agents, '-j', '-a', ip, '-n', name]

        self.id = execute(cmd)['id']
        return self.id

    @staticmethod
    def get_agents_overview(status="all", offset=0, limit=common.database_limit, sort=None, search=None):
        """
        Gets a list of available agents with basic attributes.

        :param status: Filters by agent status: active, disconnected or never connected.
        :param offset: First item to return.
        :param limit: Maximum number of items to return.
        :param sort: Sorts the items. Format: {"fields":["field1","field2"],"order":"asc|desc"}.
        :param search: Looks for items with the specified string.
        :return: Dictionary: {'items': array of items, 'totalItems': Number of items (without applying the limit)}
        """

        agents = []
        if status.lower() == "all":
            agents = execute([common.agent_control, '-j', '-l'])
        else:
            for agent in execute([common.agent_control, '-j', '-l']):
                if agent['status'].lower() == status.lower():
                    agents.append(agent)

        if search:
            agents = search_array(agents, search['value'], search['negation'])

        if sort:
            agents = sort_array(agents, sort['fields'], sort['order'])
        else:
            agents = sort_array(agents, ['id'], 'asc')

        return {'items': cut_array(agents, offset, limit), 'totalItems': len(agents)}

    @staticmethod
    def get_agents_summary():
        """
        Counts the number of agents by status.

        :return: Dictionary with keys: total, active, disconnected, neverConnected
        """

        agents = Agent.get_agents_overview()

        total = agents['totalItems']
        active = 0
        disconnected = 0
        never = 0

        for agent in agents['items']:
            if agent['status'].lower() == 'active':
                active += 1
            elif agent['status'].lower() == 'disconnected':
                disconnected += 1
            elif agent['status'].lower() == 'never connected':
                never += 1

        return {'total': total, 'active': active, 'disconnected': disconnected, 'neverConnected': never}

    @staticmethod
    def get_total_agents(status="all"):
        """
        Gets the number of agents.

        :param status: Filters by agent status: active, disconnected or never connected.

        :return: Number of agents
        """

        return Agent.get_agents_overview(status)['totalItems']

    @staticmethod
    def restart_agents(agent_id=None, restart_all=False):
        """
        Restarts an agent or all agents.

        :param agent_id: Agent ID of the agent to restart.
        :param restart_all: Restarts all agents.

        :return: Message generated by OSSEC.
        """

        if restart_all:
            return execute([common.agent_control, '-j', '-R', '-a'])
        else:
            agent = Agent(agent_id)
            return agent.restart()

    @staticmethod
    def get_agent(agent_id):
        """
        Gets an existing agent.

        :param agent_id: Agent ID.
        :return: The agent.
        """

        agent = Agent(agent_id)
        agent.get()

        return agent

    @staticmethod
    def get_agent_key(agent_id):
        """
        Get the key of an existing agent.

        :param agent_id: Agent ID.
        :return: Agent key.
        """

        agent = Agent(agent_id)
        return agent.get_key()

    @staticmethod
    def remove_agent(agent_id):
        """
        Removes an existing agent.

        :param agent_id: Agent ID.
        :return: Message generated by OSSEC.
        """
        agent = Agent(agent_id)
        return agent.remove()

    @staticmethod
    def add_agent(name, ip='any'):
        """
        Adds a new agent to OSSEC.

        :param name: name of the new agent.
        :param ip: IP of the new agent. It can be an IP, IP/NET or ANY.
        :return: Agent ID.
        """

        agent = Agent()
        return agent.add(name, ip)
